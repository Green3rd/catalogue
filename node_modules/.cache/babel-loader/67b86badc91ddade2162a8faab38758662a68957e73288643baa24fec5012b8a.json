{"ast":null,"code":"import axios from \"axios\";\nimport { getToken } from \"../localstorage\";\nconst SERVER_NAME = process.env.REACT_APP_SERVER_URL;\nconst callServer = (method, url, data) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${getToken()}`\n    }\n  };\n  return axios({\n    method,\n    data,\n    url: `${SERVER_NAME}${url}`,\n    ...config\n  });\n};\nconst GET = \"get\";\nconst POST = \"post\";\nexport const getItems = () => {\n  return callServer(GET, \"/mooncake\", {});\n};\nexport const submitOrder = data => {\n  return callServer(POST, \"/mooncake/submitOrder\", data);\n};\nexport const paymentComplete = data => {\n  return callServer(POST, \"/mooncake/paymentComplete\", data);\n};\nexport const track = data => {\n  if (data.orderNumber) {\n    return callServer(GET, `/order/findByOrderNumber/${data.orderNumber}`, {});\n  }\n  return callServer(GET, `/order/findByEmail/${data.email}`, {});\n};\nexport const login = data => {\n  return callServer(POST, \"/auth/login\", data);\n};\nexport const getOrder = data => {\n  return callServer(POST, \"/admin/getOrder\", data);\n};\nexport const exportData = data => {\n  return callServer(POST, \"/admin/exportData\", data);\n};\nexport const updateOrder = data => {\n  return callServer(POST, \"/admin/updateOrder\", data);\n};\nexport const updateShipDate = data => {\n  return callServer(POST, \"/admin/updateShipDate\", data);\n};","map":{"version":3,"names":["axios","getToken","SERVER_NAME","process","env","REACT_APP_SERVER_URL","callServer","method","url","data","config","headers","Authorization","GET","POST","getItems","submitOrder","paymentComplete","track","orderNumber","email","login","getOrder","exportData","updateOrder","updateShipDate"],"sources":["/Users/green3rd/Documents/Git/catalogue/src/shared/utils/callServer/callServer.ts"],"sourcesContent":["import axios, { Method } from \"axios\";\nimport { getToken } from \"../localstorage\";\nimport {\n  AdminOrderStatusResponse,\n  BlankRequest,\n  ExportDataResponse,\n  GetItemsResponse,\n  GetPaidOrderRequest,\n  GetPercentDiscountResponse,\n  LoginRequest,\n  LoginResponse,\n  MyServerReponse,\n  PaymentCompleteRequest,\n  PaymentCompleteResponse,\n  StatusResponse,\n  SubmitOrderRequest,\n  SubmitOrderResponse,\n  TrackingRequest,\n  TrackingResponse,\n  UpdateOrderRequest,\n  UpdateShipDateRequest,\n} from \"./type\";\n\nconst SERVER_NAME = process.env.REACT_APP_SERVER_URL;\n\ntype RequestType = BlankRequest;\n\nconst callServer = (\n  method: Method,\n  url: string,\n  data: RequestType\n): Promise<any> => {\n  const config = {\n    headers: { Authorization: `Bearer ${getToken()}` },\n  };\n  return axios({\n    method,\n    data,\n    url: `${SERVER_NAME}${url}`,\n    ...config,\n  });\n};\n\nconst GET = \"get\";\nconst POST = \"post\";\n\nexport const getItems = (): Promise<MyServerReponse<GetItemsResponse>> => {\n  return callServer(GET, \"/mooncake\", {});\n};\n\nexport const submitOrder = (\n  data: SubmitOrderRequest\n): Promise<MyServerReponse<SubmitOrderResponse>> => {\n  return callServer(POST, \"/mooncake/submitOrder\", data);\n};\n\nexport const paymentComplete = (\n  data: PaymentCompleteRequest\n): Promise<MyServerReponse<PaymentCompleteResponse>> => {\n  return callServer(POST, \"/mooncake/paymentComplete\", data);\n};\n\nexport const track = (\n  data: TrackingRequest\n): Promise<MyServerReponse<TrackingResponse>> => {\n  if (data.orderNumber) {\n    return callServer(GET, `/order/findByOrderNumber/${data.orderNumber}`, {});\n  }\n  return callServer(GET, `/order/findByEmail/${data.email}`, {});\n};\n\nexport const login = (\n  data: LoginRequest\n): Promise<MyServerReponse<LoginResponse>> => {\n  return callServer(POST, \"/auth/login\", data);\n};\n\nexport const getOrder = (\n  data: GetPaidOrderRequest\n): Promise<MyServerReponse<AdminOrderStatusResponse>> => {\n  return callServer(POST, \"/admin/getOrder\", data);\n};\n\nexport const exportData = (\n  data: GetPaidOrderRequest\n): Promise<MyServerReponse<ExportDataResponse>> => {\n  return callServer(POST, \"/admin/exportData\", data);\n};\n\nexport const updateOrder = (\n  data: UpdateOrderRequest\n): Promise<MyServerReponse<StatusResponse>> => {\n  return callServer(POST, \"/admin/updateOrder\", data);\n};\n\nexport const updateShipDate = (\n  data: UpdateShipDateRequest\n): Promise<MyServerReponse<StatusResponse>> => {\n  return callServer(POST, \"/admin/updateShipDate\", data);\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAkB,OAAO;AACrC,SAASC,QAAQ,QAAQ,iBAAiB;AAsB1C,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB;AAIpD,MAAMC,UAAU,GAAGA,CACjBC,MAAc,EACdC,GAAW,EACXC,IAAiB,KACA;EACjB,MAAMC,MAAM,GAAG;IACbC,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUX,QAAQ,CAAC,CAAC;IAAG;EACnD,CAAC;EACD,OAAOD,KAAK,CAAC;IACXO,MAAM;IACNE,IAAI;IACJD,GAAG,EAAE,GAAGN,WAAW,GAAGM,GAAG,EAAE;IAC3B,GAAGE;EACL,CAAC,CAAC;AACJ,CAAC;AAED,MAAMG,GAAG,GAAG,KAAK;AACjB,MAAMC,IAAI,GAAG,MAAM;AAEnB,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAkD;EACxE,OAAOT,UAAU,CAACO,GAAG,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;AACzC,CAAC;AAED,OAAO,MAAMG,WAAW,GACtBP,IAAwB,IAC0B;EAClD,OAAOH,UAAU,CAACQ,IAAI,EAAE,uBAAuB,EAAEL,IAAI,CAAC;AACxD,CAAC;AAED,OAAO,MAAMQ,eAAe,GAC1BR,IAA4B,IAC0B;EACtD,OAAOH,UAAU,CAACQ,IAAI,EAAE,2BAA2B,EAAEL,IAAI,CAAC;AAC5D,CAAC;AAED,OAAO,MAAMS,KAAK,GAChBT,IAAqB,IAC0B;EAC/C,IAAIA,IAAI,CAACU,WAAW,EAAE;IACpB,OAAOb,UAAU,CAACO,GAAG,EAAE,4BAA4BJ,IAAI,CAACU,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC;EAC5E;EACA,OAAOb,UAAU,CAACO,GAAG,EAAE,sBAAsBJ,IAAI,CAACW,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;AAChE,CAAC;AAED,OAAO,MAAMC,KAAK,GAChBZ,IAAkB,IAC0B;EAC5C,OAAOH,UAAU,CAACQ,IAAI,EAAE,aAAa,EAAEL,IAAI,CAAC;AAC9C,CAAC;AAED,OAAO,MAAMa,QAAQ,GACnBb,IAAyB,IAC8B;EACvD,OAAOH,UAAU,CAACQ,IAAI,EAAE,iBAAiB,EAAEL,IAAI,CAAC;AAClD,CAAC;AAED,OAAO,MAAMc,UAAU,GACrBd,IAAyB,IACwB;EACjD,OAAOH,UAAU,CAACQ,IAAI,EAAE,mBAAmB,EAAEL,IAAI,CAAC;AACpD,CAAC;AAED,OAAO,MAAMe,WAAW,GACtBf,IAAwB,IACqB;EAC7C,OAAOH,UAAU,CAACQ,IAAI,EAAE,oBAAoB,EAAEL,IAAI,CAAC;AACrD,CAAC;AAED,OAAO,MAAMgB,cAAc,GACzBhB,IAA2B,IACkB;EAC7C,OAAOH,UAAU,CAACQ,IAAI,EAAE,uBAAuB,EAAEL,IAAI,CAAC;AACxD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}